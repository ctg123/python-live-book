[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Python Live Book",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "1.1 Expressions Recap looking at variables\nWe will use JupyterLab or Google Colab to work through examples and discussions throughout the lectures and lab periods. They are a wonderful resource, with the benefit of not requiring you to install any specific distribution of Python, or any specific libraries.\nThis is a book created from markdown and executable code.\n• A line of code generally contains a statement\n• Statements indicate the task that we want the computer to perform\nx = 2\nThis is a recommended programming style for Python: PEP8 Style Guide",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#expressions-recap-looking-at-variables",
    "href": "intro.html#expressions-recap-looking-at-variables",
    "title": "1  Introduction",
    "section": "",
    "text": "x is termed an identifier of a variable\n= is the assignment symbol\n2 is an integer that we are assigning to the variable identified by ‘x’\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote the spaces around operators and the assignment symbol",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#variable-names",
    "href": "intro.html#variable-names",
    "title": "1  Introduction",
    "section": "1.2 Variable Names",
    "text": "1.2 Variable Names\n\nCase-sensitive!\n\n\n\n\n\n\n\n\nvariable names may contain letters, digits, and underscores\ncannot begin with a number",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#data-types",
    "href": "intro.html#data-types",
    "title": "1  Introduction",
    "section": "1.3 Data Types",
    "text": "1.3 Data Types\n\nEvery variable has a type\nPython makes it easy to discover the type of variables with the built-in command type\n\n\n\n\n\n\n\n\n\n\n\n\n\ntype is a function whose argument is y and whose output is float.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#arithmetic-operations",
    "href": "intro.html#arithmetic-operations",
    "title": "1  Introduction",
    "section": "1.4 Arithmetic Operations",
    "text": "1.4 Arithmetic Operations\nThe division operator / always returns a float, even if the operands are integers. The floor division operator // returns the integer part of the division result. The modulus operator % gives the remainder after division. Python follows the PEMDAS order of operations (Parentheses, Exponents, Multiplication and Division, Addition and Subtraction).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nx raised to the power of y\n\n\n\n\n\n\nThe integer floor operation\n\n\n\n\n\n\nThe modulus (remainder) operation\n\n\n\n\n\n\n\n1.4.1 Operator precedence rules\n\nParentheses evaluate first – If nested, innermost parentheses evaluate first\nExponents evaluate next, in order of right-to-left\nMultiplication, division, and modulus evaluate next, in order of left-to-right\nAddition and subtraction evaluate last, in order of left-to-right\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1.4.2 Use parentheses to avoid ambiguity",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#strings-intro",
    "href": "intro.html#strings-intro",
    "title": "1  Introduction",
    "section": "1.5 Strings Intro",
    "text": "1.5 Strings Intro\n\nThe string type holds sequence of characters\nThe print function displays strings on the screen\nThe f-string stands for formatted string literals, a more readable way to include variables in strings\n\n\n\n\n\n\n\nStrings can span multiple lines via escape characters\n\n\n\n\n\n\nBasic f-string example",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#obtaining-user-input",
    "href": "intro.html#obtaining-user-input",
    "title": "1  Introduction",
    "section": "1.6 Obtaining user input",
    "text": "1.6 Obtaining user input\n\nThe input function allows the user to supply a value\nThe resulting value is always a string\n\nname = input(\"Please enter your name: \")\nprint(f\"You name is {name}!\")\n\nNote: While the rest of this site runs Python using Pyodide, browser-based environments like Quarto don’t support input() for user interaction. To demonstrate interactive input, we use Trinket.io, which allows users to type responses during program execution.\n\n\n\nThis code block prompts the user to enter their name and then prints a greeting message.The input function is used to get user input, and the or “Guest” part ensures that if the user doesn’t enter anything, the default name “Guest” is used.\nname = input(\"Enter your name: \") or \"Guest\"\n# The f-string is used to format the greeting message with the user's name.\nprint(f\"Hello, {name}!\")",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#casting-data-types-via-int",
    "href": "intro.html#casting-data-types-via-int",
    "title": "1  Introduction",
    "section": "1.7 Casting data types via int",
    "text": "1.7 Casting data types via int\ny = input(\"Please enter your age\")\nz = int(y)\nprint(f\"The variable z is {z}, which is of data type: {type(z)}\")",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#boolean-expressions",
    "href": "intro.html#boolean-expressions",
    "title": "1  Introduction",
    "section": "1.8 Boolean expressions",
    "text": "1.8 Boolean expressions\nBoolean expressions evaluate to keywords True or False:\n\ngreater than: &gt;\nless than: &lt;\ngreater than or equal to: &gt;=\nless than or equal to: &lt;=\nis equal to: ==\nis not equal to: !=",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#conditional-execution-if-statement",
    "href": "intro.html#conditional-execution-if-statement",
    "title": "1  Introduction",
    "section": "1.9 Conditional execution: if statement",
    "text": "1.9 Conditional execution: if statement\nThe if statement allows your program’s execution to depend on the state of the program",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#comments",
    "href": "intro.html#comments",
    "title": "1  Introduction",
    "section": "1.10 Comments",
    "text": "1.10 Comments\n\nComments allow you to document your code inline\nDocumentation allows others to understand the purpose of different sections of your program\nComments are indicated with the # symbol, and can appear above or to the right of your code",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#variables-values-and-types",
    "href": "intro.html#variables-values-and-types",
    "title": "1  Introduction",
    "section": "1.11 Variables, values, and types",
    "text": "1.11 Variables, values, and types\n\nVariables refer to objects\nObjects have both a value and a type\nIn the expression x = 78, x is a variable whose value is 78 and whose type is int\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1.11.1 Dynamic typing\nPython determines your variable’s types during program execution",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "control-statements-program-dev.html",
    "href": "control-statements-program-dev.html",
    "title": "2  Control statements and program development",
    "section": "",
    "text": "2.1 Objectives\nIn this module, you’ll learn:",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Control statements and program development</span>"
    ]
  },
  {
    "objectID": "control-statements-program-dev.html#objectives",
    "href": "control-statements-program-dev.html#objectives",
    "title": "2  Control statements and program development",
    "section": "",
    "text": "Decide whether to execute actions with conditional statements if, if ... else and if -&gt; elif -&gt; else\nExecute statements repeatedly with for and while.\nShorten assignment expressions with augmented assignments.\nUse the for statement and the built-in range function to repeat actions for a sequence of values.\nPerform sentinel-controlled repetition with while.\nLearn problem-solving skills: understanding problem requirements, dividing problems into smaller pieces, developing algorithms to solve problems and implementing those algorithms in code.\nDevelop algorithms through the process of top-down, step-by-step refinement.\nCreate compound conditions with the Boolean operators and, or and not .\nStop looping with break statements.\nForce the next iteration of a loop with continue .\nUse some functional-style programming features to write scripts that are more concise, clearer, easier to debug and easier to parallelize",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Control statements and program development</span>"
    ]
  },
  {
    "objectID": "control-statements-program-dev.html#control-statements",
    "href": "control-statements-program-dev.html#control-statements",
    "title": "2  Control statements and program development",
    "section": "2.2 Control statements",
    "text": "2.2 Control statements\n\nComputer programs execute sequentially\nControl statements are able to alter the sequence of executions",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Control statements and program development</span>"
    ]
  },
  {
    "objectID": "control-statements-program-dev.html#selection-statements",
    "href": "control-statements-program-dev.html#selection-statements",
    "title": "2  Control statements and program development",
    "section": "2.3 Selection statements",
    "text": "2.3 Selection statements\n\nif\nif else\nif elif else\n\n\n\nAn example of the if elif else block:",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Control statements and program development</span>"
    ]
  },
  {
    "objectID": "control-statements-program-dev.html#conditional-expressions",
    "href": "control-statements-program-dev.html#conditional-expressions",
    "title": "2  Control statements and program development",
    "section": "2.4 Conditional Expressions",
    "text": "2.4 Conditional Expressions\n\n2.4.1 Expressions evaluate to either True or False\n\nNon-zero numbers evaluate to True\nNon-empty strings evaluate to True\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2.4.2 Suite indentation\n\nThe block under each condition is termed a suite\nPython relies on proper indentation for its syntax\n\n\n\n\n\n\n\n\n\n2.4.3 Conditional expressions may be written in one line of code",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Control statements and program development</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "3  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Summary</span>"
    ]
  },
  {
    "objectID": "control-statements-program-dev.html#loops-with-the-while-statement",
    "href": "control-statements-program-dev.html#loops-with-the-while-statement",
    "title": "2  Control statements and program development",
    "section": "2.5 Loops with the while statement",
    "text": "2.5 Loops with the while statement\n\nThe while command allows a block of code to be executed a variable number of times\n\n\n2.5.1 Determine when a Netflix subscription will exceed $20\n\nLet’s assume that Netflix will raise the price by 5% after every year\n\n\n\n\n\n\n\n\n\n2.5.2 Formatting strings to make numbers more readable\n\nNote the leading f, the {}, and the string formatting character 0.2f and 0d in the above",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Control statements and program development</span>"
    ]
  },
  {
    "objectID": "control-statements-program-dev.html#the-for-loop",
    "href": "control-statements-program-dev.html#the-for-loop",
    "title": "2  Control statements and program development",
    "section": "2.6 The for loop",
    "text": "2.6 The for loop\n\nThe most common type of iteration in Python\nThe for statement allows an action to be executed a fixed number of times\nNB: Python indexes from 0 (not 1)\nThe built-in range(x) function outputs all integers from 0 to x-1",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Control statements and program development</span>"
    ]
  },
  {
    "objectID": "control-statements-program-dev.html#iterables-and-lists",
    "href": "control-statements-program-dev.html#iterables-and-lists",
    "title": "2  Control statements and program development",
    "section": "2.7 Iterables and lists",
    "text": "2.7 Iterables and lists\n\nThe sequence to the right of the for keyword must be an iterable\nThe most common type of iterable in Python is a list:",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Control statements and program development</span>"
    ]
  },
  {
    "objectID": "control-statements-program-dev.html#augmented-expressions",
    "href": "control-statements-program-dev.html#augmented-expressions",
    "title": "2  Control statements and program development",
    "section": "2.8 Augmented expressions",
    "text": "2.8 Augmented expressions\n\nAdding and multiplying a set of numbers is a very common operation\nThe operators += and *= facilitate iterative sums and products",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Control statements and program development</span>"
    ]
  },
  {
    "objectID": "control-statements-program-dev.html#the-break-and-continue-statements",
    "href": "control-statements-program-dev.html#the-break-and-continue-statements",
    "title": "2  Control statements and program development",
    "section": "2.9 The break and continue statements",
    "text": "2.9 The break and continue statements\n\nPython exits a while or for loop if it encounters a break statement\nPython moves to the next iteration of the loop if it encounters a continue statement\n\nExample of the break statement:\nrunning_sum = 0\nfor i in range(1000000):\n    num = int(input('Enter a number to add. Enter -1 to stop'))\n    if num!=-1:\n        running_sum += num\n    else:\n        break\n\nprint('The sum of the entered numbers is', running_sum)\n\n\nExample of the continue statement. The following program will only add positive numbers:\nrunning_sum = 0\nfor i in range(1000000):\n    num = int(input('Enter a number to add. Enter 0 to stop'))\n    if num&lt;0:\n        continue\n    elif num==0:\n        break\n    else:\n        running_sum += num\n\nprint(f'The sum of the positive entered numbers is: {running_sum}')",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Control statements and program development</span>"
    ]
  },
  {
    "objectID": "control-statements-program-dev.html#logical-operators",
    "href": "control-statements-program-dev.html#logical-operators",
    "title": "2  Control statements and program development",
    "section": "2.10 Logical operators",
    "text": "2.10 Logical operators\nLogical operators are used on conditional statements (either True or False). They perform Logical AND, Logical OR, and Logical NOT operations.\n\n\n\n\n\n\n\n\nOperator\nDescription\nExample\n\n\n\n\nAND\nReturns True if both statements are true\nx &lt; 5 and x &lt; 10\n\n\nOR\nReturns True if one of the statements is true\nx &lt; 5 or x &lt; 4\n\n\nNOT\nReverses the result; False if condition is true\nnot(x &lt; 5 and x &lt; 10)\n\n\n\n\n2.10.1 Example of AND Operator\nThe Logical AND operator returns True if both the operands are True else it returns False.\n\n\n\n\n\n\nExample 2: The code checks if all variables a, b, and c evaluate to True, printing a message accordingly.\n\n\n\n\n\n\n\nNote: If the first expression is evaluated to be false while using the AND operator, then the further expressions are not evaluated.\n\n\n\n2.10.2 Example of OR operator\nThe Logical OR operator returns True if either of the operands is True.\n\n\n\n\n\n\nThe code checks if any of the variables a, b, or c has a boolean value as True; if so, it prints “At least one number has boolean value as True”, otherwise, it prints “All the numbers have boolean value as False”.\n\n\n\n\n\n\n\n\n2.10.3 Example of NOT operator\nThe Logical NOT operator works with a single boolean value. If the boolean value is True it returns False and vice-versa.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Control statements and program development</span>"
    ]
  },
  {
    "objectID": "control-statements-program-dev.html#algorithm-development",
    "href": "control-statements-program-dev.html#algorithm-development",
    "title": "2  Control statements and program development",
    "section": "2.11 Algorithm development",
    "text": "2.11 Algorithm development\nAlgorithms often have three stages:\n\nInitialization of variables\nProcessing or logical implementation\ntermination\n\n\nA Requirements statement specifies the objective of the program\nExample: The nth term in the Fibonacci sequence is defined by adding the previous two terms. Determine the nth term in the sequence for arbitrary n\nAlgorithm\n\nSet F(0):=0\nSet F(1):=1\nRepeat from 2 to n:\n\nF(n) := F(n-1) + F(n-2)\n\nReturn `F(n)\n\n\n\n2.11.1 What is the Fibonacci Sequence?\nThe Fibonacci sequence is a fun way to keep practicing Python. The Fibonacci sequence starts with 0 and 1, with each number being the sum of the two before it. The simplest way to generate it in Python is with a loop:\n\n\n\n\n\n\nThe Fibonacci sequence is a mathematical concept that appears in many areas of science and nature. It is a series of numbers where each number is the sum of the two preceding ones, starting with 0 and 1. This pattern forms the basis for applications in fields like computer science and finance.\nTwo main aspects define the Fibonacci sequence: the recursive structure of the sequence and its relationship with the golden ratio.\nRecall that the Fibonacci sequence starts with 0 and 1. Each new number is the sum of the two numbers before it.\nFor example:\n0 + 1 = 1\n1 + 1 = 2\n1 + 2 = 3\n2 + 3 = 5\n3 + 5 = 8\n5 + 8 = 13 …\nMathematically, we write it as F(n) = F(n-1) + F(n-2). The sequence builds itself by repeatedly adding the last two numbers. The first two numbers, 0 and 1, are the starting point or base cases. Without these, the sequence wouldn’t work.\n\n\n2.11.2 Algorithm refinement\n\nWhen designing algorithms, it is good practice to sketch out the steps in several stages\nThe level of detail increases as you move to the next stage",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Control statements and program development</span>"
    ]
  }
]