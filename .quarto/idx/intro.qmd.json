{"title":"Introduction","markdown":{"yaml":{"format":"live-html","pyodide":null,"packages":null},"headingText":"Introduction","containsRefs":false,"markdown":"\n\n\nWe will use JupyterLab or Google Colab to work through examples and discussions throughout the lectures and lab periods. They are a wonderful resource, with the benefit of not requiring you to install any specific distribution of Python, or any specific libraries.\n\nThis is a book created from markdown and executable code.\n\n## Expressions Recap looking at variables\n\n• A line of code generally contains a statement\n\n• Statements indicate the task that we want the computer to perform\n\n``` {python}\nx = 2\n```\n\n-   x is termed an *identifier* of a variable\n\n-   = is the *assignment* symbol\n\n-   2 is an integer that we are assigning to the variable identified by **‘x’**\n\n```{pyodide}\nx = 45\ny = 36\nz = x + y\n```\n\n```{pyodide}\nz\n```\n\n> Note the spaces around operators and the assignment symbol\n\nThis is a recommended programming style for Python: [PEP8 Style Guide](https://peps.python.org/pep-0008/)\n\n```{pyodide}\n# this is harder to read\nz=x+y\n\nz\n```\n\n## Variable Names\n\n-   Case-sensitive!\n\n```{pyodide}\nX = 12\nx = 34\nprint(f\"X is {X} and x is {x}\")\nX, x\n```\n\n-   variable names may contain letters, digits, and underscores\n-   cannot begin with a number\n\n```{pyodide}\nxyz_123 = 56\n123_xyz = 56\n```\n\n## Data Types\n\n-   Every variable has a type\n-   Python makes it easy to discover the type of variables with the built-in command type\n\n```{pyodide}\nx = 78\ntype(x)\n```\n\n```{pyodide}\ny = 12.34\ntype(y)\n```\n\ntype is a *function* whose *argument* is y and whose output is float.\n\n## Arithmetic Operations\n\nThe division operator `/` always returns a float, even if the operands are integers. The floor division operator `//` returns the integer part of the division result. The modulus operator `%` gives the remainder after division. Python follows the `PEMDAS` order of operations (Parentheses, Exponents, Multiplication and Division, Addition and Subtraction).\n\n```{pyodide}\n# create two variables\nx = 2\ny = 3\n# Addition\nx + y\n```\n\n```{pyodide}\n# Subtraction\ny - x\n```\n\n```{pyodide}\n# Multplication\nx * y\n```\n\n```{pyodide}\n# Division\ny / x\n```\n\nx raised to the power of y\n```{pyodide}\nx ** y\n```\n\nThe integer floor operation\n```{pyodide}\ny // x\n```\n\nThe modulus (remainder) operation\n```{pyodide}\ny % x\n```\n\n### Operator precedence rules\n\n- Parentheses evaluate first\n– If nested, innermost parentheses evaluate first\n- Exponents evaluate next, in order of right-to-left\n- Multiplication, division, and modulus evaluate next, in order of left-to-right\n- Addition and subtraction evaluate last, in order of left-to-right\n\n```{pyodide}\nx = 30\ny = 5\nz = 25\nx * y + z\n```\n\n```{pyodide}\nx * ( y + z )\n```\n\n### Use parentheses to avoid ambiguity\n\n```{pyodide}\n2 ** 3 ** 4\n```\n\n```{pyodide}\n(2 ** 3) ** 4\n```\n\n```{pyodide}\n2 ** (3 ** 4)\n```\n\n## Strings Intro\n\n- The string type holds sequence of characters\n- The print function displays strings on the screen\n- The `f-string` stands for formatted string literals, a more readable way to include variables\nin strings\n\n```{pyodide}\nx = 'Python is cool'\nprint(x)\n```\n\nStrings can span multiple lines via escape characters\n```{pyodide}\nx = 'Python is lit \\n and is so cool! '\nprint(x)\n```\nBasic f-string example\n```{pyodide}\n# Basic f-string example\nstudent_name = \"Chaance\"\ngrade_level = 9\n\nprint(f\"Welcome {student_name}, you are in grade {grade_level}!\")\n```\n\n```{pyodide}\n# student info examples\ncurrent_semester = \"Summer 2025\"\ncollege_hours = 6\nhigh_school_gpa = 3.5\n\nprint(f\"This {current_semester}, you've earned {college_hours} college credit hours!\")\nprint(f\"Your current GPA is {high_school_gpa}\")\n```\n\n```{pyodide}\n# Compare old string formatting vs f-strings\nstudent = \"John\"\ncredits = 18\n\n# Old way (don't use this)\nprint(\"Student: \" + student + \" has \" + str(credits) + \" credits\")\n# Modern way with f-strings (use this!)\nprint(f\"Student: {student} has {credits} credits\")\n```\n\n```{pyodide}\n# F-strings with formatting options\npercentage = 0.875\nprint(f\"Graduation rate: {percentage:.1%}\") # Shows as 87.5%\ngpa = 3.14159\nprint(f\"GPA: {gpa:.2f}\") # Shows as 3.14\n```\n\n```{pyodide}\n# Multi-line f-strings for reports\nstudent_id = \"123456\"\nname = \"Chaance\"\ntotal_credits = 18\nmax_credits = 26\n# This would print an example report card\nprint(f\"\"\"\n=== GRADE PROGRESS REPORT ===\nStudent Name: {name}\nStudent ID: {student_id}\nTotal Credits Earned: {total_credits}\nCredits Remaining: {max_credits - total_credits}\nCompletion Rate: {(total_credits / max_credits) * 100:.1f}%\n\"\"\")\n```\n\n## Obtaining user input\n- The input function allows the user to supply a value\n- The resulting value is always a string\n\n```python\nname = input(\"Please enter your name: \")\nprint(f\"You name is {name}!\")\n```\n\n> Note: While the rest of this site runs Python using Pyodide, browser-based environments like Quarto don't support input() for user interaction. To demonstrate interactive input, we use [Trinket.io](https://trinket.io/), which allows users to type responses during program execution.\n\n<iframe src=\"https://trinket.io/embed/python3/0ed725bd873d\" width=\"100%\" height=\"356\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" allowfullscreen></iframe>\n\nThis code block prompts the user to enter their name and then prints a greeting message.The input function is used to get user input, and the or \"Guest\" part ensures that if the user doesn't enter anything, the default name \"Guest\" is used.\n\n```python\nname = input(\"Enter your name: \") or \"Guest\"\n# The f-string is used to format the greeting message with the user's name.\nprint(f\"Hello, {name}!\")\n```\n\n<iframe src=\"https://trinket.io/embed/python3/bf4dea53f5e5\" width=\"100%\" height=\"356\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" allowfullscreen></iframe>\n\n## Casting data types via int\n\n```python\ny = input(\"Please enter your age\")\nz = int(y)\nprint(f\"The variable z is {z}, which is of data type: {type(z)}\")\n```\n<iframe src=\"https://trinket.io/embed/python3/401a6780026a\" width=\"100%\" height=\"356\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" allowfullscreen></iframe>\n\n## Boolean expressions\n\nBoolean expressions evaluate to keywords `True` or `False`:\n\n- greater than: >\n- less than: <\n- greater than or equal to: >=\n- less than or equal to: <=\n- is equal to: ==\n- is not equal to: !=\n\n```{pyodide}\nx = 12\ny = 34\nz = x > y\nprint(z)\n```\n\n## Conditional execution: `if statement`\n\nThe `if statement` allows your program’s execution to depend on the state of the program\n\n```{pyodide}\nx = 44\ny = 55\n\nif x == y:\n  print(\"These numbers are the same!\")\n\nif x > y:\n  print(\"x is bigger than y\")\n\nif x < y:\n  print(\"x is smaller than y\")\n```\n## Comments\n- Comments allow you to document your code inline\n- Documentation allows others to understand the purpose of different sections of your program\n- Comments are indicated with the # symbol, and can appear above or to the right of your code\n\n```{pyodide}\n# set the variables\nx = 44\ny = 55\n\n# check if x is bigger than y\nif x > y:\n  print(\"x is bigger than y\") # display a message to the user if x is bigger than y\nelif x < y:\n  print(\"x is less than y\") # display a message to the user if x is lesser than y\n```\n## Variables, values, and types\n\n- Variables refer to objects\n- Objects have both a value and a type\n- In the expression `x = 78`, x is a variable whose value is 78 and whose type is int\n\n```{pyodide}\nx = 3.14156\nprint(\"The value of x is \", x)\nprint(\"The type of x is\", type(x))\n```\n\n```{pyodide}\n x = '3.14156'\nprint(\"The value of x is \", x)\nprint(\"The type of x is\", type(x))\n```\n\n### Dynamic typing\n\nPython determines your variable’s types during program execution\n\n```{pyodide}\nx = 10\ny = 3\nz = x/y\nprint(\"The type of z is\", type(z))\n```","srcMarkdownNoYaml":"\n\n# Introduction\n\nWe will use JupyterLab or Google Colab to work through examples and discussions throughout the lectures and lab periods. They are a wonderful resource, with the benefit of not requiring you to install any specific distribution of Python, or any specific libraries.\n\nThis is a book created from markdown and executable code.\n\n## Expressions Recap looking at variables\n\n• A line of code generally contains a statement\n\n• Statements indicate the task that we want the computer to perform\n\n``` {python}\nx = 2\n```\n\n-   x is termed an *identifier* of a variable\n\n-   = is the *assignment* symbol\n\n-   2 is an integer that we are assigning to the variable identified by **‘x’**\n\n```{pyodide}\nx = 45\ny = 36\nz = x + y\n```\n\n```{pyodide}\nz\n```\n\n> Note the spaces around operators and the assignment symbol\n\nThis is a recommended programming style for Python: [PEP8 Style Guide](https://peps.python.org/pep-0008/)\n\n```{pyodide}\n# this is harder to read\nz=x+y\n\nz\n```\n\n## Variable Names\n\n-   Case-sensitive!\n\n```{pyodide}\nX = 12\nx = 34\nprint(f\"X is {X} and x is {x}\")\nX, x\n```\n\n-   variable names may contain letters, digits, and underscores\n-   cannot begin with a number\n\n```{pyodide}\nxyz_123 = 56\n123_xyz = 56\n```\n\n## Data Types\n\n-   Every variable has a type\n-   Python makes it easy to discover the type of variables with the built-in command type\n\n```{pyodide}\nx = 78\ntype(x)\n```\n\n```{pyodide}\ny = 12.34\ntype(y)\n```\n\ntype is a *function* whose *argument* is y and whose output is float.\n\n## Arithmetic Operations\n\nThe division operator `/` always returns a float, even if the operands are integers. The floor division operator `//` returns the integer part of the division result. The modulus operator `%` gives the remainder after division. Python follows the `PEMDAS` order of operations (Parentheses, Exponents, Multiplication and Division, Addition and Subtraction).\n\n```{pyodide}\n# create two variables\nx = 2\ny = 3\n# Addition\nx + y\n```\n\n```{pyodide}\n# Subtraction\ny - x\n```\n\n```{pyodide}\n# Multplication\nx * y\n```\n\n```{pyodide}\n# Division\ny / x\n```\n\nx raised to the power of y\n```{pyodide}\nx ** y\n```\n\nThe integer floor operation\n```{pyodide}\ny // x\n```\n\nThe modulus (remainder) operation\n```{pyodide}\ny % x\n```\n\n### Operator precedence rules\n\n- Parentheses evaluate first\n– If nested, innermost parentheses evaluate first\n- Exponents evaluate next, in order of right-to-left\n- Multiplication, division, and modulus evaluate next, in order of left-to-right\n- Addition and subtraction evaluate last, in order of left-to-right\n\n```{pyodide}\nx = 30\ny = 5\nz = 25\nx * y + z\n```\n\n```{pyodide}\nx * ( y + z )\n```\n\n### Use parentheses to avoid ambiguity\n\n```{pyodide}\n2 ** 3 ** 4\n```\n\n```{pyodide}\n(2 ** 3) ** 4\n```\n\n```{pyodide}\n2 ** (3 ** 4)\n```\n\n## Strings Intro\n\n- The string type holds sequence of characters\n- The print function displays strings on the screen\n- The `f-string` stands for formatted string literals, a more readable way to include variables\nin strings\n\n```{pyodide}\nx = 'Python is cool'\nprint(x)\n```\n\nStrings can span multiple lines via escape characters\n```{pyodide}\nx = 'Python is lit \\n and is so cool! '\nprint(x)\n```\nBasic f-string example\n```{pyodide}\n# Basic f-string example\nstudent_name = \"Chaance\"\ngrade_level = 9\n\nprint(f\"Welcome {student_name}, you are in grade {grade_level}!\")\n```\n\n```{pyodide}\n# student info examples\ncurrent_semester = \"Summer 2025\"\ncollege_hours = 6\nhigh_school_gpa = 3.5\n\nprint(f\"This {current_semester}, you've earned {college_hours} college credit hours!\")\nprint(f\"Your current GPA is {high_school_gpa}\")\n```\n\n```{pyodide}\n# Compare old string formatting vs f-strings\nstudent = \"John\"\ncredits = 18\n\n# Old way (don't use this)\nprint(\"Student: \" + student + \" has \" + str(credits) + \" credits\")\n# Modern way with f-strings (use this!)\nprint(f\"Student: {student} has {credits} credits\")\n```\n\n```{pyodide}\n# F-strings with formatting options\npercentage = 0.875\nprint(f\"Graduation rate: {percentage:.1%}\") # Shows as 87.5%\ngpa = 3.14159\nprint(f\"GPA: {gpa:.2f}\") # Shows as 3.14\n```\n\n```{pyodide}\n# Multi-line f-strings for reports\nstudent_id = \"123456\"\nname = \"Chaance\"\ntotal_credits = 18\nmax_credits = 26\n# This would print an example report card\nprint(f\"\"\"\n=== GRADE PROGRESS REPORT ===\nStudent Name: {name}\nStudent ID: {student_id}\nTotal Credits Earned: {total_credits}\nCredits Remaining: {max_credits - total_credits}\nCompletion Rate: {(total_credits / max_credits) * 100:.1f}%\n\"\"\")\n```\n\n## Obtaining user input\n- The input function allows the user to supply a value\n- The resulting value is always a string\n\n```python\nname = input(\"Please enter your name: \")\nprint(f\"You name is {name}!\")\n```\n\n> Note: While the rest of this site runs Python using Pyodide, browser-based environments like Quarto don't support input() for user interaction. To demonstrate interactive input, we use [Trinket.io](https://trinket.io/), which allows users to type responses during program execution.\n\n<iframe src=\"https://trinket.io/embed/python3/0ed725bd873d\" width=\"100%\" height=\"356\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" allowfullscreen></iframe>\n\nThis code block prompts the user to enter their name and then prints a greeting message.The input function is used to get user input, and the or \"Guest\" part ensures that if the user doesn't enter anything, the default name \"Guest\" is used.\n\n```python\nname = input(\"Enter your name: \") or \"Guest\"\n# The f-string is used to format the greeting message with the user's name.\nprint(f\"Hello, {name}!\")\n```\n\n<iframe src=\"https://trinket.io/embed/python3/bf4dea53f5e5\" width=\"100%\" height=\"356\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" allowfullscreen></iframe>\n\n## Casting data types via int\n\n```python\ny = input(\"Please enter your age\")\nz = int(y)\nprint(f\"The variable z is {z}, which is of data type: {type(z)}\")\n```\n<iframe src=\"https://trinket.io/embed/python3/401a6780026a\" width=\"100%\" height=\"356\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" allowfullscreen></iframe>\n\n## Boolean expressions\n\nBoolean expressions evaluate to keywords `True` or `False`:\n\n- greater than: >\n- less than: <\n- greater than or equal to: >=\n- less than or equal to: <=\n- is equal to: ==\n- is not equal to: !=\n\n```{pyodide}\nx = 12\ny = 34\nz = x > y\nprint(z)\n```\n\n## Conditional execution: `if statement`\n\nThe `if statement` allows your program’s execution to depend on the state of the program\n\n```{pyodide}\nx = 44\ny = 55\n\nif x == y:\n  print(\"These numbers are the same!\")\n\nif x > y:\n  print(\"x is bigger than y\")\n\nif x < y:\n  print(\"x is smaller than y\")\n```\n## Comments\n- Comments allow you to document your code inline\n- Documentation allows others to understand the purpose of different sections of your program\n- Comments are indicated with the # symbol, and can appear above or to the right of your code\n\n```{pyodide}\n# set the variables\nx = 44\ny = 55\n\n# check if x is bigger than y\nif x > y:\n  print(\"x is bigger than y\") # display a message to the user if x is bigger than y\nelif x < y:\n  print(\"x is less than y\") # display a message to the user if x is lesser than y\n```\n## Variables, values, and types\n\n- Variables refer to objects\n- Objects have both a value and a type\n- In the expression `x = 78`, x is a variable whose value is 78 and whose type is int\n\n```{pyodide}\nx = 3.14156\nprint(\"The value of x is \", x)\nprint(\"The type of x is\", type(x))\n```\n\n```{pyodide}\n x = '3.14156'\nprint(\"The value of x is \", x)\nprint(\"The type of x is\", type(x))\n```\n\n### Dynamic typing\n\nPython determines your variable’s types during program execution\n\n```{pyodide}\nx = 10\ny = 3\nz = x/y\nprint(\"The type of z is\", type(z))\n```"},"formats":{"live-html":{"identifier":{"display-name":"HTML","target-format":"live-html","base-format":"html","extension-name":"live"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"shortcodes":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["/home/ctgadget/Projects/python-live-book/_extensions/r-wasm/live/live.lua"],"output-file":"intro.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.33","ojs-engine":true,"revealjs-plugins":[],"bibliography":["references.bib"],"pyodide":null,"editor":"visual","theme":{"light":"cosmo","dark":"darkly"},"pdf":{"documentclass":"scrreprt"},"packages":null},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["live-html"]}